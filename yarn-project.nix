# This file is generated by running "yarn install" inside your project.
# Manual changes might be lost - proceed with caution!

{ lib, nodejs, stdenv, fetchurl, writeText, writeShellScriptBin, git, cacert, gnused }:
{ src, symlinkPackages ? false, overrideAttrs ? null, netrcFilePath ? null, secretsEnvVars ? null, ... } @ args:

let

  yarnPath = ./.yarn/releases/yarn-3.1.1.cjs;
  yarnRelativePathString = "./.yarn/releases/yarn-3.1.1.cjs";
  yarnLock = ./yarn.lock;
  packageJson = ./package.json;
  yarnrcYaml = builtins.path {
    path = ./.yarnrc.yml;
    name = "yarnrc.yml";
  };
  yarnPlugins = builtins.path {
    path = ./.yarn/plugins;
    name = "yarnPlugins";
  };

  cacheFolder = ".yarn/cache";

  # Call overrideAttrs on a derivation if a function is provided.
  optionalOverride = fn: drv:
    if fn == null then drv else drv.overrideAttrs fn;

  # Common attributes between Yarn derivations.
  drvCommon = {
    # Make sure the build uses the right Node.js version everywhere.
    buildInputs = [ nodejs ];
    # Tell node-gyp to use the provided Node.js headers for native code builds.
    npm_config_nodedir = nodejs;
    # Tell node-pre-gyp to never fetch binaries / always build from source.
    npm_config_build_from_source = "true";
    # Defines the shell alias to run Yarn.
    postHook = ''
      yarn() {
        CI=1 node "${yarnPath}" "$@"
      }
    '';
  };

  setupProjectFiles = ''
    # package.json cannot be symlinked since when executing "yarn run ...", yarn
    # will follow the symlink and consider the location of the original file as
    # the projects root directory.
    cp ${packageJson} package.json
    ln -s ${yarnLock} yarn.lock
    ln -s ${yarnrcYaml} .yarnrc.yml

    mkdir -p .yarn
    ln -s ${yarnPlugins} .yarn/plugins

    mkdir -p $(dirname ${yarnRelativePathString})
    ln -s ${yarnPath} ${yarnRelativePathString}
  '';

  checkSandboxPathExists = writeShellScriptBin "check-sandbox-file-exists" ''
    set -ueo pipefail

    file_path=$1

    if ! test -e "$file_path"
    then
      echo >&2 "Error: $file_path does not exist or cannot be accessed due to permissions!"
      echo >&2 "  Make sure it's added to extra-sandbox-paths and that nixbld"
      echo >&2 "  user group has read access to it."
      exit 1
    fi
  '';

  linkNetrcFile = writeShellScriptBin "link-netrc-file" ''
    set -ueo pipefail

    netrc_file_path=$1
    home=$2

    ${checkSandboxPathExists}/bin/check-sandbox-file-exists "$netrc_file_path"

    if ! test -d "$home";
    then
      echo >&2 "given HOME path (''${home}) does not exist or is not a directory"
      exit 1
    fi

    echo >&2 "linking .netrc file at ''${netrc_file_path} to ''${home}"

    ln -s "$netrc_file_path" "$home"
  '';

  exportEnvVarsFromFilesIfAny = envVarNamesToPaths:
    if envVarNamesToPaths != null
    # build a list of export statement
    then lib.concatStringsSep "\n" (lib.mapAttrsToList
      (name: path: ''
        check-sandbox-file-exists "${path}"
        export ${name}=$(cat "${path}")
      '')
      envVarNamesToPaths
    )
    else ""
  ;

  # Create derivations for fetching dependencies.
  cacheDrvs = let
    builder = builtins.toFile "builder.sh" ''
      source $stdenv/setup

      ${exportEnvVarsFromFilesIfAny secretsEnvVars}

      home=$TMP

      ${
        if netrcFilePath != null
        then ''link-netrc-file "${netrcFilePath}" "$home"''
        else ""
      }

      build_dir=$TMP/build
      mkdir -p $build_dir
      cd $build_dir

      ${setupProjectFiles}

      mkdir -p ${cacheFolder}
      YARN_CACHE_FOLDER=$(pwd)/${cacheFolder}

      HOME="$home" \
        YARN_CACHE_FOLDER="$YARN_CACHE_FOLDER" \
        CI=1 \
        node '${yarnPath}' nixify fetch-one $locator

      # Because we change the cache dir, Yarn may generate a different name.
      output_filename_stripped=$(sed 's/-[^-]*\.[^-]*$//' <<< "$outputFilename")

      mv "$YARN_CACHE_FOLDER/$output_filename_stripped"-* $out
    '';
  in lib.mapAttrs (locator: { filename, sha512 }: stdenv.mkDerivation {
    inherit builder locator;
    # We need .zip extension since without pnp will not look inside the archive.
    name = lib.strings.sanitizeDerivationName locator + ".zip";
    buildInputs = [ nodejs ];
    nativeBuildInputs = [ git cacert linkNetrcFile checkSandboxPathExists ];
    outputFilename = filename;
    outputHashMode = "flat";
    outputHashAlgo = "sha512";
    outputHash = sha512;
  }) cacheEntries;

  # Create a shell snippet to copy dependencies from a list of derivations.
  mkCacheBuilderForDrvs = symlinkPackages: drvs:
    writeText "collect-cache.sh" (lib.concatMapStrings (drv: ''
      ${if symlinkPackages then "ln -s" else "cp"} ${drv} '${drv.outputFilename}'
    '') drvs);


  # Derivation with content of .yarn/cache and .pnp.cjs
  deps = stdenv.mkDerivation (drvCommon // {
    name = "yarn-3-test-deps";
    # Disable Nixify plugin to save on some unnecessary processing.
    yarn_enable_nixify = "false";

    configurePhase = ''
      output_dir=$out/libexec/deps
      mkdir -p $output_dir
      cd $output_dir

      ${setupProjectFiles}

      # Copy over the Yarn cache.
      mkdir -p ${cacheFolder}
      pushd '${cacheFolder}' > /dev/null
      source ${mkCacheBuilderForDrvs symlinkPackages (lib.attrValues cacheDrvs)}
      popd > /dev/null



      runHook postConfigure
    '';

    dontUnpack = true;
    dontBuild = true;

    installPhase = ''
      runHook preInstall

      # Yarn may need a writable home directory.
      export yarn_global_folder="$TMP"

      # Some node-gyp calls may call out to npm, which could fail due to an
      # read-only home dir.
      export HOME="$TMP"

      # running preConfigure after the cache is populated allows for
      # preConfigure to contain substituteInPlace for dependencies as well as the
      # main project. This is necessary for native bindings that maybe have
      # hardcoded values.
      runHook preConfigure

      # Run normal Yarn install to complete dependency installation.
      # YARN_VIRTUAL_FOLDER is set this way to make it easy to replace in
      # installPhase below, so that in the end virtual paths resolve to
      # packages in nix store.
      YARN_CACHE_FOLDER=$(pwd)/${cacheFolder} \
        yarn install --immutable --immutable-cache

      runHook postInstall
    '';

    passthru = {
      inherit nodejs;
    };
  });

  # Main project derivation.
  project = stdenv.mkDerivation (drvCommon // {
    inherit src;
    name = "yarn-3-test";

    nativeBuildInputs = [gnused];
    depsPath = "${deps}/libexec/deps";

    configurePhase = ''
      ${setupProjectFiles}
      # We can't symlink this one since it doesn't work as a symlink due to
      # packageLocations within it being relative path to this files locations
      # real location, therefore it needs to be located at the root of the
      # project for relative and workspace scoped imports to work.
      cp $depsPath/.pnp.cjs .pnp.cjs

      runHook postConfigure
    '';

    dontBuild = true;

    installPhase = ''
      runHook preInstall

      app_dir=$out/libexec/$name
      bin_dir=$out/bin

      mkdir -p $(dirname $app_dir) $out/bin

      # Move the entire project to the output directory.
      mv $PWD $app_dir
      cd $app_dir

      # sed helpers
      escape_sed_replacement () {
        echo "$1" | sed -e 's/[\/&]/\\&/g'
      }

      escape_sed_pattern () {
        echo "$1" | sed -e 's/[]\/$*.^[]/\\&/g'
      }

      # Replace packageLocation for the workspace and main package.
      sed_pattern='"packageLocation": "'$depsPath'/"'
      sed_replace='"packageLocation": "'$app_dir'/"'

      sed -E -i \
        -e "s/$(escape_sed_pattern "$sed_pattern")/$(escape_sed_replacement "$sed_replace")/g" \
        .pnp.cjs

      # Invoke a plugin internal command to setup binaries.
      yarn nixify install-bin $bin_dir

      runHook postInstall
    '';

    passthru = {
      inherit nodejs;
    };
  });

cacheEntries = {
"node-module-test-dev@https://github.com/adrian-gierakowski/node-module-test.git#commit=fa8ae80352a91634fa9f2f154e99bf2674688344" = { filename = "node-module-test-dev-https-f14195534d-f690ae58c6.zip"; sha512 = "f690ae58c6ef06a991fb944859f51799664b37a54ac5164e72f889f0c5336bf5b057edc0338b6bef64f42cb90c6e553cd81f85f9daa81db643e039ccabc28b40"; };
"node-module-test-no-install@https://github.com/adrian-gierakowski/node-module-test.git#commit=40970c1bc7ddaf6ac8ec2914300870628eb81975" = { filename = "node-module-test-no-install-https-33055c7e9f-702becde9c.zip"; sha512 = "702becde9c6774b9dff4595b261443e5d56abc29cd6d778125d664a936163b8ce4105d74879a12a6d7477379897b35d068473830ed934131aad807d31fac9761"; };
"node-module-test@https://github.com/adrian-gierakowski/node-module-test.git#commit=40970c1bc7ddaf6ac8ec2914300870628eb81975" = { filename = "node-module-test-https-f0d3ed1cd5-de65658437.zip"; sha512 = "de65658437c49496b1106586856bab7df88e31b9d5489b474175843d99d396913f3324c6b3ac3715f1fbe35a28caa8f55aaf886302f521e785405e3dd09f2e82"; };
"ramda@npm:0.28.0" = { filename = "ramda-npm-0.28.0-6a5fe8f6cc-44ea6e5010.zip"; sha512 = "44ea6e5010bba70151b6a92d8114a91915e8b5a16105cce65fae58c9d7386b812c429645e35f21141d7087568550ce383bc10ee1a65cdec951f4b69ea457e6a4"; };
"node-module-test-test@https://github.com/adrian-gierakowski/node-module-test.git#commit=fa8ae80352a91634fa9f2f154e99bf2674688344" = { filename = "node-module-test-test-https-dcd09ddb46-910c62af41.zip"; sha512 = "910c62af41d00cc6ace688fd1705e53fcb4b46a79e122bfd116953e710f433d7ba3a62d7561109aef3fd10385d92cb2f694215de51fe0e4787b60d1a6eed43e4"; };
};

in optionalOverride overrideAttrs project
